View(pro_data)
View(pho_data)
transvar_split <- data.frame(str_split_fixed(transvar$`coordinates(gDNA/cDNA/protein)`,"/", 3)[,1],str_split_fixed(transvar$input,":",2)[,2])
colnames(transvar_split) <- c("genomic_pos","SUB_MOD_RSD")
transvar_split <- transvar_split[transvar_split$genomic_pos != ".",]
transvar_split <- unique(transvar_split)
pho_rsd_split <- data.frame(str_split_fixed(pho_raw$antibody, "[_ ]", 2))
colnames(pho_rsd_split) <- c("SUBSTRATE","antibody")
pho_rsd_split$genomic_pos <- pho_raw$genomic_pos
pho_rsd_split <- merge(pho_rsd_split,transvar_split, by=c("genomic_pos"), all.x = TRUE)
View(pho_rsd_split)
for (cancer in c("BRCA","OV")) {
#for (cancer in c("BRCA")) {
# input according to cancer type-------------------------------------------------------------------
if (cancer == "BRCA") {
# BRCA
pro_raw <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_PRO_formatted_normalized_max10NA.txt",sep=""))
pro_data <- pro_raw[,-1]
pho_raw <- read_delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_RPPA_formatted_wGpos_forR.txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
pho_raw <- pho_raw[!is.na(pho_raw$genomic_pos) & pho_raw$genomic_pos != ".",]
pho_data <- pho_raw[,-c(1,2)]
pho_data <- pho_data[,colnames(pro_data)]
transvar <- read_delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_RPPA_formatted_transvar_output.txt",sep = ""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
if ( cancer == "OV" ) {
#OV
pho_raw <- read_delim(paste(baseD,"pan3can_shared_data/OV/OV_RPPA_formatted_wGpos_forR.txt",sep=""), "\t", escape_double = FALSE, trim_ws = TRUE)
pho_raw <- pho_raw[!is.na(pho_raw$genomic_pos) & pho_raw$genomic_pos != ".",]
pho_data <- pho_raw[,-c(1,2)]
pro_raw <- read.delim(paste(baseD,"pan3can_shared_data/OV/OV_PNNL_PRO_formatted_normalized_max10NA.txt",sep=""))
pro_data <- pro_raw[,-1]
temp <-  str_split_fixed(colnames(pho_raw[,-c(1,2)]),"-",2)
temp <- paste("X",temp[,1],".",temp[,2],"_PNNL",sep="")
colnames(pho_data) <- temp
temp2 <- intersect(temp, colnames(pro_data))
pro_data <- pro_data[,temp2]
pho_data <- pho_data[,temp2]
transvar <- read_delim(paste(baseD,"pan3can_shared_data/OV/OV_RPPA_formatted_transvar_output.txt",sep = ""), "\t", escape_double = FALSE, trim_ws = TRUE)
}
transvar_split <- data.frame(str_split_fixed(transvar$`coordinates(gDNA/cDNA/protein)`,"/", 3)[,1],str_split_fixed(transvar$input,":",2)[,2])
colnames(transvar_split) <- c("genomic_pos","SUB_MOD_RSD")
transvar_split <- transvar_split[transvar_split$genomic_pos != ".",]
transvar_split <- unique(transvar_split)
#split the SUBSTRATE and SUB_MOD_RSD in the first column
pho_rsd_split <- data.frame(str_split_fixed(pho_raw$antibody, "[_ ]", 2))
colnames(pho_rsd_split) <- c("SUBSTRATE","antibody")
pho_rsd_split$genomic_pos <- pho_raw$genomic_pos
pho_rsd_split <- merge(pho_rsd_split,transvar_split, by=c("genomic_pos"), all.x = TRUE)
# initiate ----------------------------------------------------------------
#initiating the lists to store info for each model
list1 <- list()
# looping for model1 -----------------------------------------------------------------
for (kinase in unique_kinase){
# find protein expression level for the kinase
pro_kinase <- pro_data[pro_raw$X == kinase,]
if(nrow(pro_kinase) != 0){
# find its substrate set
k_k_s_table = k_s_table[k_s_table$GENE == kinase,]
k_sub <- unique(k_k_s_table$SUB_GENE)
for (substrate in k_sub){# for each substrate for one kinase
# find its phosphosites-row numbers
s_pho_table <- which(pho_rsd_split$SUBSTRATE==substrate)
# go through all the phosphosites
for (i in s_pho_table) {
# find phosphorylation level
sub_mod_rsd <- pho_rsd_split$SUB_MOD_RSD[i]
pho_sub <- pho_data[i,]
#normalize phospho level of substrate and protein expression level of the kinase to 0 to 1
pho_sub_norm <- range01(unlist(pho_sub),na.rm = T)
pro_kin_norm <- range01(unlist(pro_kinase),na.rm = T)
#prepare regression data for model1
data1 <- data.frame(pho_sub_norm,pro_kin_norm)
size <- nrow(data1[complete.cases(data1),])
if( size > least_samples ){#more than 2 complete dataset
# fit regression model1: pho_substrate ~ a*pro_kinase + k
fit1 <- glm(pho_sub_norm ~ pro_kin_norm,data = data1, family=gaussian())
# record the kinase name, kinase expression level, substrate name, SUB_MOD_RSD, phophorylation level into the list1
list1[[length(list1)+1]] <- list(KINASE=kinase,SUBSTRATE=substrate,SUB_MOD_RSD=sub_mod_rsd,Pvalue=c(coef(summary(fit1))[2,4]),Coef_pro_kin=fit1$coefficients[2],Size=size)
}
}
}
}
}
# integrate table from all the models(need to repetite again for another cancer dataset) --------------------------------------------------------
# construct table for model1
# columns: KINASE, SUBSTRATE, SUB_MOD_RSD, Pvalue, size, pair, self
KINASE <- sapply(list1, "[[", "KINASE")
SUBSTRATE <- sapply(list1, "[[", "SUBSTRATE")
SUB_MOD_RSD  <- sapply(list1, "[[", "SUB_MOD_RSD")
size <- sapply(list1, "[[", "Size")
table1 <- data.frame(KINASE,SUBSTRATE,SUB_MOD_RSD,size)
table1$model <- "pho_sub~pro_kin"
table1$P_pro_kin <- sapply(list1, "[[", "Pvalue")
table1$P_pro_sub <- NA
table1$P_pho_kin <- NA
table1$coef_pro_kin <- sapply(list1, "[[", "Coef_pro_kin")
table1$coef_pro_sub <- NA
table1$coef_pho_kin <- NA
table1$pair <- paste(table1$KINASE,":",table1$SUBSTRATE,":",table1$SUB_MOD_RSD,sep="")
# combine table
table <- table1
# mark cancer and self-regulation
table$Cancer <- cancer
table$self <- as.character(table$KINASE) == as.character(table$SUBSTRATE)
#choose one command
if ( cancer == "BRCA" ) {
table_BRCA <- table
}
if ( cancer == "OV" ) {
table_OV <- table
}
}
View(table_BRCA)
kinase
substrate
sub_mod_rsd
pho_sub_norm
pro_kin_norm
table_2can <- rbind(table_BRCA,table_OV)
table_2can$SELF <- "trans"; table_2can$SELF[table_2can$self] <- "cis"
name = c("pro_kin","pro_sub","pho_kin")
## adjust p-values to FDR
for (mod in c("pho_sub~pro_kin", "pho_sub~pro_kin+pro_sub", "pho_sub~pro_kin+pro_sub+pho_kin","pho_sub~pho_kin")) {
for (cancer in c("BRCA","OV")) {
for(self in c(TRUE,FALSE)) {
for(coln in name) {#adjust pvalues for each variable
row <- (table_2can$self==self) & (table_2can$model==mod) & (table_2can$Cancer==cancer)
table_2can[row,paste("FDR_",coln,sep = "")] <-p.adjust(table_2can[row,paste("P_",coln,sep = "")],method = "fdr")
}
}
}
}
table_sig <- table_2can[table_2can$model=="pho_sub~pro_kin" & table_2can$FDR_pro_kin <= sig,]
View(table_sig)
# library -----------------------------------------------------------------
library(stringr)
library(ggplot2)
library(reshape)
library(grid)
require(plyr)
library(readr)
# # for working on Kuan's mac
# baseD = "/Users/khuang/Box\ Sync/PhD/proteogenomics/CPTAC_pan3Cancer/"
# for working on Yige's mac
baseD = "/Users/yigewu/Box\ Sync/"
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# input regression processed data -----------------------------------------
table_2can <- read.delim(paste(baseD,"pan3can_shared_data/analysis_results/regression/table/kinase_substrate_regression.txt",sep = ""))
table1 <- table_2can[table_2can$Cancer=="BRCA" & table_2can$model=="pho_sub~pro_kin",]
# choose kinase/phosphotase -----------------------------------------------
protein <- "kinase"
# choose kinase/phosphotase, significance level -----------------------------------------------
protein <- "kinase"
sig <- 0.05
# different standard of validation for kinase and phosphotase -------------
if ( protein == "kinase" ) {
valid_type <- "pos_sig"
}
if ( protein == "phosphotase" ) {
valid_type <- "neg_sig"
}
# initiate ----------------------------------------------------------------
x <- vector(mode = "numeric", length = length(unique_kinase) )
temp <- data.frame(matrix(rep(x,4), ncol=4, byrow=T))
valid_trans <- cbind(unique_kinase,temp)
colnames(valid_trans) <- c("kinase","pos_sig","pos_insig","neg_sig","neg_insig")
rownames(valid_trans) <- unique_kinase
valid_cis <- valid_trans
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# input k_s_table-------------------------------------------------------------------
if ( protein == "kinase" ) {
### read in the kinase/substrate table/ phosphorylation data ###
k_s_table = read.delim(paste(baseD,"pan3can_shared_data/Phospho_databases/PhosphositePlus/data/Kinase_Substrate_Dataset_human_final_hugoified.txt",sep=""))
}
if ( protein == "phosphotase" ) {
### read in the phosphotase/substrate table/ phosphorylation data ###
k_s_table <- read.csv(paste(baseD,"pan3can_shared_data/Phospho_databases/DEPOD/DEPOD_201612_human_phosphatase-protein_substrate_to_Kuan-lin.csv",sep = ""))
colnames(k_s_table) <- c("Phosphatase_UniProtAC_human","GENE","Substrate_UniProtAC_ref","SUB_GENE","Substrate_Type","DephosphoSite","BioassayType", "PubMed_ID_rev")
}
#function for normalize the variables for regression
range01 <- function(x, ...){(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
unique_kinase <- unique(k_s_table$GENE)
# initiate ----------------------------------------------------------------
x <- vector(mode = "numeric", length = length(unique_kinase) )
temp <- data.frame(matrix(rep(x,4), ncol=4, byrow=T))
valid_trans <- cbind(unique_kinase,temp)
colnames(valid_trans) <- c("kinase","pos_sig","pos_insig","neg_sig","neg_insig")
rownames(valid_trans) <- unique_kinase
valid_cis <- valid_trans
# make tables for trans pairs ---------------------------------------------
for( kinase in unique_kinase) {
temp <- table1[table1$KINASE==kinase,]
valid_trans[kinase,"pos_sig"] <- length(which(temp$coef_pro_kin>0 & temp$FDR_pro_kin <= sig & !temp$self))
valid_trans[kinase,"pos_insig"] <- length(which(temp$coef_pro_kin>0 & temp$FDR_pro_kin > sig & !temp$self))
valid_trans[kinase,"neg_sig"] <- length(which(temp$coef_pro_kin<0 & temp$FDR_pro_kin <= sig & !temp$self))
valid_trans[kinase,"neg_insig"] <- length(which(temp$coef_pro_kin<0 & temp$FDR_pro_kin > sig & !temp$self))
}
if ( protein == "phosphotase") {
valid_trans <- valid_trans[,c("kinase","neg_sig","neg_insig","pos_sig","pos_insig")]
}
valid_trans$all_count <- rowSums(valid_trans[,c("pos_sig","pos_insig","neg_sig","neg_insig")])
valid_trans$valid_count <- valid_trans[,valid_type]
valid_trans$valid_ratio <- valid_trans$valid_count/valid_trans$all_count
table <- melt(valid_trans[!is.na(valid_trans$valid_ratio),],id=c("kinase","all_count","valid_count","valid_ratio"))
colnames(table) <- c("kinase","all_count","valid_count","valid_ratio","coef_FDR","count")
table$KINASE <- reorder(table$kinase, table$valid_count)
ggplot() +
geom_bar(data=table, aes(y = count, x = KINASE, fill = coef_FDR), stat="identity",
position='stack') +
theme_bw() +
xlab(protein)+ylab("number of phosphosites with different regression result")+
coord_flip()+ theme(axis.text.x = element_text(colour="black", size=6,angle=90, vjust=0.5), axis.text.y = element_text(colour="black", size=5))
View(valid_trans)
tn = paste(baseD,"pan3can_shared_data/analysis_results/regression/table/",cancer,'_',protein,"_trans_regression_validation_statistics.txt", sep="")
write.table(valid_trans, file=tn, quote=F, sep = '\t', row.names = FALSE)
# choose kinase/phosphotase, cancer , significance level -----------------------------------------------
protein <- "kinase"
sig <- 0.05
cancer <- "BRCA"
tn = paste(baseD,"pan3can_shared_data/analysis_results/regression/table/",cancer,'_',protein,"_trans_regression_validation_statistics.txt", sep="")
write.table(valid_trans, file=tn, quote=F, sep = '\t', row.names = FALSE)
p <- ggplot(valid_trans, aes(all_count, valid_ratio, label = rownames(valid_trans)))
p + geom_text(check_overlap = TRUE)
# choose kinase/phosphotase, cancer , significance level, model -----------------------------------------------
protein <- "kinase"
sig <- 0.05
cancer <- "BRCA"
mode <- "pho_sub~pro_kin"
# library -----------------------------------------------------------------
library(stringr)
library(ggplot2)
library(reshape)
library(grid)
require(plyr)
# # for working on Kuan's mac
# baseD = "/Users/khuang/Box\ Sync/PhD/proteogenomics/CPTAC_pan3Cancer/"
# for working on Yige's mac
baseD = "/Users/yigewu/Box\ Sync/"
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# input regression processed data -----------------------------------------
table_2can <- read.delim(paste(baseD,"pan3can_shared_data/analysis_results/regression/table/",protein,"_substrate_regression.txt",sep = ""))
#table <- table_2can[table_2can$Cancer==c & table_2can$model==mode & table_2can$self==cis,]
table_2can$coef_pro_kin_filtered = remove_outliers(table_2can$coef_pro_kin)
table_2can_outlier_removed_m = table_2can[!is.na(table_2can$coef_pro_kin_filtered) & table_2can$model == mode,]
# function -------------------------------------------------------------
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- out_thres * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
if ( protein == "kinase") {
plot_fdr_scale <- 5
}
if ( protein == "phosphotase") {
plot_fdr_scale <- 2
}
p = ggplot(table_2can_outlier_removed_m,aes(x=coef_pro_kin, y=-log10(FDR_pro_kin)))
p = p + facet_grid(SELF~Cancer,scales = "free_y")#, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + geom_point(alpha=0.05)
p = p + geom_text(aes(label= ifelse(-log10(FDR_pro_kin)>plot_fdr_scale, pair, NA)),size=2,alpha=0.5)
p = p + theme_bw() #+ theme_nogrid()
p = p + theme(axis.title = element_text(size=10), axis.text.x = element_text(colour="black", size=6,angle=90, vjust=0.5), axis.text.y = element_text(colour="black", size=10))#element_text(colour="black", size=14))
p = p + labs(x = "Coefficient", y="-log10(FDR)")
p
# choose kinase/phosphotase, cancer , significance level, model -----------------------------------------------
protein <- "kinase"
sig <- 0.05
mode <- "pho_sub~pro_kin"
top <- 50 # choose top n rows for FDR_pro_kin for model1
c <- "BRCA" #choose in which cancer extract the top n rows
# library -----------------------------------------------------------------
library(stringr)
library(ggplot2)
library(reshape)
library(grid)
require(plyr)
# # for working on Kuan's mac
# baseD = "/Users/khuang/Box\ Sync/PhD/proteogenomics/CPTAC_pan3Cancer/"
# for working on Yige's mac
baseD = "/Users/yigewu/Box\ Sync/"
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# choose kinase/phosphotase, cancer , significance level, model -----------------------------------------------
protein <- "kinase"
sig <- 0.05
mode <- "pho_sub~pro_kin"
top <- 50 # choose top n rows for FDR_pro_kin for model1
c <- "BRCA" #choose in which cancer extract the top n rows
# library -----------------------------------------------------------------
library(stringr)
library(ggplot2)
library(reshape)
library(grid)
require(plyr)
# # for working on Kuan's mac
# baseD = "/Users/khuang/Box\ Sync/PhD/proteogenomics/CPTAC_pan3Cancer/"
# for working on Yige's mac
baseD = "/Users/yigewu/Box\ Sync/"
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# input regression processed data -----------------------------------------
table_2can <- read.delim(paste(baseD,"pan3can_shared_data/analysis_results/regression/table/",protein,"_substrate_regression.txt",sep = ""))
table_sig <- table_2can[table_2can$model==mode & table_2can$FDR_pro_kin<=sig,]
cis <- TRUE
t0 <- table_sig[table_sig$self==cis,]
# sort by FDR_pro_kin
t1 <- t0[t0$Cancer==c,]
t1 <- t1[order(t1$FDR_pro_kin),]
## corresponding results for other two models are extracted and ordered
rows <- c()
for(i in 1:top){
r <- unlist(which(t0$pair==t1$pair[i]))
rows <- c(rows,r)
}
table <- t0[rows,]
#table_2can_brca_top = table_2can[table_2can$pair %in% table$pair,]
## actual plotting
lim = max(max(table$coef_pro_kin),min(table$coef_pro_kin))
p = ggplot(table,aes(x=model, y=pair))# make this the original ethni
p = p + facet_grid(KINASE~Cancer, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + geom_point(aes(fill=coef_pro_kin, size =-log10(FDR_pro_kin), color=ifelse(sig, "black",NA)),pch=21)
p = p + scale_fill_gradientn(name= "Coefficient", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + scale_colour_manual(values=c("black",NA))
p = p + theme_bw() #+ theme_nogrid()
p = p + labs(x = "", y="kinase:substrate:SUB_MOD_RSD")
p = p + theme(axis.title = element_text(size=10), axis.text.x = element_text(colour="black", size=6,angle=90, vjust=0.5), axis.text.y = element_text(colour="black", size=10))#element_text(colour="black", size=14))
p
# choose kinase or phosphotase, significance level, outlier threshold and least sample number-------------------------
sig <- 0.05 # significance level
out_thres <- 1.5 #threshold for outlier
protein <- "kinase"
cancer <- "BRCA"
# library -----------------------------------------------------------------
library(reshape)
library(stringr)
# # for working on Kuan's mac
# baseD = "/Users/khuang/Box\ Sync/PhD/proteogenomics/CPTAC_pan3Cancer/"
# for working on Yige's mac
baseD = "/Users/yigewu/Box\ Sync/"
setwd(paste(baseD,"pan3can_analysis/phospho_network",sep=""))
source("../pan3can_aes.R") # aes for general purposes; it should be one directory out of the working directory
# input according to cancer type-------------------------------------------------------------------
if (cancer == "BRCA") {
# BRCA
BRCA_pro_f = paste(baseD,"pan3can_shared_data/BRCA/BRCA_PRO_formatted_normalized_max10NA.txt",sep="")
pro_data <- read.delim(BRCA_pro_f)
BRCA_pho_f = paste(baseD,"pan3can_shared_data/BRCA/TCGA_Breast_BI_Phosphoproteome.phosphosite.itraq_abbrev_normlized_max10NA.tsv",sep="")
pho_data = read.delim(BRCA_pho_f)
BRCA_pho_g = paste(baseD,"pan3can_shared_data/BRCA/BRCA_PHO_by_PRO_formatted_normalized_max10NA.txt",sep="")
pho_gdata = read.delim(BRCA_pho_g)
colx <- 78 # the column of protein name
clinical <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_clinical_summary.txt",sep = ""))
somatic <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_SOMATIC_formatted.txt",sep = ""))
somatic_aa <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_SOMATIC_formatted_amino_acid.txt",sep = ""))
pro_outlier <- read.delim(paste(baseD,"pan3can_shared_data/analysis_results/druggable_outlier/2016-03-02/2016-03-02_KH_BRCA druggable proteome normalized_outlier_score_table.txt",sep = ""))
}
# ordering the columns by sample name
pro_data <- pro_data[,order(names(pro_data))]
pho_data <- pho_data[,order(names(pho_data))]
pho_gdata <- pho_gdata[,order(names(pho_gdata))]#order the grouped phospho data
somatic <- somatic[,order(names(somatic))]
somatic_aa <- somatic_aa[,order(names(somatic_aa))]
pro_outlier <- pro_outlier[,order(names(pro_outlier))]; rownames(pro_outlier) <- pro_outlier$X
clinical <- clinical[,order(names(clinical))]
#split the SUBSTRATE and SUB_MOD_RSD in the first column
pho_rsd_split <- data.frame(str_split_fixed(pho_data$X, ":", 3))
#covert the SUB_MOD_RSD from lowercase to uppercase
pho_rsd_split[,3] <- toupper(pho_rsd_split[,3])
colnames(pho_rsd_split) <- c("SUBSTRATE","transcript","SUB_MOD_RSD")
# input regardless to cancer type, choose between kinase or phosphotase-------------------------------------------------------------------
if ( protein == "kinase" ) {
### read in the kinase/substrate table/ phosphorylation data ###
K_S_f = paste(baseD,"pan3can_shared_data/Phospho_databases/PhosphositePlus/data/Kinase_Substrate_Dataset_human_final_hugoified.txt",sep="")
k_s_table = read.delim(K_S_f)
}
if ( protein == "phosphotase" ) {
### read in the phosphotase/substrate table/ phosphorylation data ###
k_s_table <- read.csv(paste(baseD,"pan3can_shared_data/Phospho_databases/DEPOD/DEPOD_201612_human_phosphatase-protein_substrate_to_Kuan-lin.csv",sep = ""))
colnames(k_s_table) <- c("Phosphatase_UniProtAC_human","GENE","Substrate_UniProtAC_ref","SUB_GENE","Substrate_Type","DephosphoSite","BioassayType", "PubMed_ID_rev")
}
#function for normalize the variables for regression
range01 <- function(x, ...){(x - min(x, ...)) / (max(x, ...) - min(x, ...))}
unique_kinase <- unique(k_s_table$GENE)
# input according to cancer type-------------------------------------------------------------------
if (cancer == "BRCA") {
# BRCA
BRCA_pro_f = paste(baseD,"pan3can_shared_data/BRCA/BRCA_PRO_formatted_normalized_max10NA.txt",sep="")
pro_data <- read.delim(BRCA_pro_f)
BRCA_pho_f = paste(baseD,"pan3can_shared_data/BRCA/TCGA_Breast_BI_Phosphoproteome.phosphosite.itraq_abbrev_normlized_max10NA.tsv",sep="")
pho_data = read.delim(BRCA_pho_f)
BRCA_pho_g = paste(baseD,"pan3can_shared_data/BRCA/BRCA_PHO_by_PRO_formatted_normalized_max10NA.txt",sep="")
pho_gdata = read.delim(BRCA_pho_g)
colx <- 78 # the column of protein name
clinical <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_clinical_summary.txt",sep = ""))
somatic <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_SOMATIC_formatted.txt",sep = ""))
somatic_aa <- read.delim(paste(baseD,"pan3can_shared_data/BRCA/BRCA_SOMATIC_formatted_amino_acid.txt",sep = ""))
pro_outlier <- read.delim(paste(baseD,"pan3can_shared_data/analysis_results/druggable_outlier/2016-03-02/2016-03-02_KH_BRCA druggable proteome normalized_outlier_score_table.txt",sep = ""))
}
# ordering the columns by sample name
pro_data <- pro_data[,order(names(pro_data))]
pho_data <- pho_data[,order(names(pho_data))]
pho_gdata <- pho_gdata[,order(names(pho_gdata))]#order the grouped phospho data
somatic <- somatic[,order(names(somatic))]
somatic_aa <- somatic_aa[,order(names(somatic_aa))]
pro_outlier <- pro_outlier[,order(names(pro_outlier))]; rownames(pro_outlier) <- pro_outlier$X
clinical <- clinical[,order(names(clinical))]
#split the SUBSTRATE and SUB_MOD_RSD in the first column
pho_rsd_split <- data.frame(str_split_fixed(pho_data$X, ":", 3))
#covert the SUB_MOD_RSD from lowercase to uppercase
pho_rsd_split[,3] <- toupper(pho_rsd_split[,3])
colnames(pho_rsd_split) <- c("SUBSTRATE","transcript","SUB_MOD_RSD")
# initiate -------------------------------------------------------------------
# first column == kinase name, column names == sample names
k_s_table_trans <- k_s_table
unique_kinase = unique(as.vector(k_s_table_trans$GENE))
x <- vector(mode = "numeric", length = length(unique_kinase))+NaN
temp <- data.frame(matrix(rep(x,ncol(pho_data)-1), ncol=ncol(pho_data)-1, byrow=T))
k_p_table <- cbind(unique_kinase,temp)
sample_names <- colnames(pho_data[-colx])
colnames(k_p_table) <- c("KINASE", sample_names)
rownames(k_p_table) <- k_p_table$KINASE
nsample <- length(sample_names)
# pre-process the k_s_table_trans to remove those rows in which substrate==kinase -------------------------------------------------------------------
start.time <- Sys.time()
for (kinase in unique_kinase){
k_k_s_table <- unique(as.vector(k_s_table_trans$SUB_GENE[k_s_table_trans$GENE==kinase]))
row <- c()
for (substrate in k_k_s_table) {
row <- c(row,which(pho_rsd_split$SUBSTRATE==substrate))
}
for (sam in 1:nsample) {
# for each cell, average phosphosites phosphrylation level for all the substrates for this kinase
k_p_table[k_p_table$KINASE==kinase, sam+1] <- mean(pho_data[row,sam], na.rm = TRUE)
}
}
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
k_p_score <- k_p_table
for (kinase in k_p_table$KINASE) {
#for (kinase in "ABL1") {
temp <- k_p_table[kinase,sample_names]
IQR = quantile(temp, probs=0.75, na.rm=T) - quantile(temp, probs=0.25, na.rm=T)
k_p_score[kinase,sample_names] = ( temp - quantile(temp, probs=0.75, na.rm=T))/IQR
}
View(k_p_table)
View(k_p_score)
k_p_her <- melt(k_p_table, id="KINASE")
Her2 <- vector(mode = "numeric", length = length(k_p_her))+NA
for (sam in sample_names[which(clinical[1,]=="Her2")]) {
Her2[k_p_her$variable==sam] <- "Her2+"
}
Her2[is.na(Her2)] <- "Her2-"
k_p_her$Her2_status <- Her2
colnames(k_p_her) <- c("kinase","sample","ave_sub_phos","Her_status")
View(k_p_her)
x <- vector(mode = "logical", length = nrow(pro_outlier))
temp <- data.frame(matrix(rep(x,ncol(pro_outlier)-1), ncol=ncol(pro_outlier)-1, byrow=T))
is.pro_outlier <- cbind(pro_outlier$X,temp)
colnames(is.pro_outlier) <- c("kinase", sample_names)
rownames(is.pro_outlier) <- is.pro_outlier$kinase
## loop around the kinases
for (kinase in pro_outlier$X) {
#for (kinase in "ABL1") {
temp <- pro_outlier[kinase,sample_names]
IQR = quantile(temp, probs=0.75, na.rm=T) - quantile(temp, probs=0.25, na.rm=T)
is.pro_outlier[kinase,sample_names] = ( pro_outlier[kinase,sample_names] >= quantile(temp, probs=0.75, na.rm=T) + out_thres*IQR)
}
## add pro_outlier into k_p_her
is.pro.outlier <- melt(is.pro_outlier, id="kinase")
colnames(is.pro.outlier) <- c("kinase","sample","pro_outlier_status")
pro.level <- melt(pro_outlier, id="X")
colnames(pro.level) <- c("kinase","sample","pro_level")
pro.level <- merge(pro.level,is.pro.outlier)
score <- melt(k_p_score, id="KINASE")
View(score)
View(pro.level)
View(score)
colnames(score) <- c("kinase","sample","score")
overlap <- merge(k_p_her,score)
overlap <- merge(overlap,pro.level, all.x = T)
overlap$pro_outlier_status[is.na(overlap$pro_outlier_status)] <- FALSE
View(overlap)
## add mutatin into it
rownames(somatic) <- somatic$X
mut <- c()
for (kinase in somatic$X) {
#for (kinase in "A1BG") {
mut <- rbind(mut,t(grepl("missense",unlist(somatic[kinase,sample_names]))))
}
mut <- data.frame(mut)
colnames(mut) <- sample_names
mut$kinase <- somatic$X
missense <- melt(mut,id="kinase")
colnames(missense) <- c("kinase","sample","missense")
rownames(somatic_aa) <- somatic_aa$X
aa <- melt(somatic_aa,id="X")
colnames(aa) <- c("kinase","sample","aa")
overlap <- merge(overlap, aa, all.x = T)
overlap <- merge(overlap, missense, all.x = T)
overlap$missense[is.na(overlap$missense)] <- FALSE
overlap$missense.pro_outlier <- paste(overlap$missense,overlap$pro_outlier_status,sep = ",")
View(overlap)
# write out tables --------------------------------------------------------
tn = paste(baseD,"pan3can_shared_data/analysis_results/reverse/table/",protein,"_",cancer,"_reverse_marking_out_thers_",out_thres,".txt", sep="")
write.table(overlap, file=tn, quote=F, sep = '\t', row.names = FALSE)
