pho_table_m <- merge(pho_table_m,outlier_overlap, all.x = T)
pho_table_m$is.kin.outlier <- (!is.na(pho_table_m$up_phos_cscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$up_phos_cscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$up_phos_cscore < - out_thres))
pho_table_m$is.sub.outlier <- (!is.na(pho_table_m$sub_phos_ctransscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$sub_phos_ctransscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$sub_phos_ctransscore < - out_thres))
pho_table_m$kinorsub <- pho_table_m$is.kin.outlier | pho_table_m$is.sub.outlier
pho_table_m$is.self.outlier <- (!is.na(pho_table_m$value)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$value > 1.5) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$value < - 1.5))
pho_table_m$self_kinorsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinorsub,sep = "_")
pho_table_m$kinandsub <- pho_table_m$is.kin.outlier & pho_table_m$is.sub.outlier
pho_table_m$self_kinandsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinandsub,sep = "_")
lim = max(abs(max(pho_table_m$value, na.rm = T)),abs(min(pho_table_m$value, na.rm = T)))
p = ggplot(data=pho_table_m)
p = p + geom_tile(aes(x=sample, y=Phosphosite, fill=value, color=self_kinorsub, width=0.7, height=0.7), size = 0.5)
p = p + scale_color_manual(values=c("FALSE_FALSE" = NA,"FALSE_TRUE" = NA ,"TRUE_FALSE" = "grey", "TRUE_TRUE" = "black"))
p = p + scale_fill_gradientn(name= "phosphorylation level", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + facet_grid(protein~.,scales = "free_y", space = "free_y", drop=T)#, , space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
p
plots[[2]] = p
gp = do.call(rbind_gtable, plots)
# print the integrated plot
grid.newpage()
#cal_width = 20
fn = paste(baseD,'pan3can_shared_data/analysis_results/pathway/tailored_outlier/',path,"_correlated_phosphosites_outlier_marked_top_",len,"_",cancer,"_kinase_table.pdf",sep ="")
pdf(fn, height=6, width=15,useDingbats = F)
grid.draw(gp)
dev.off()
}
p = ggplot(data=pho_path)
p = p + geom_point(aes(x=sample, y=Global_phosphorylation, fill=Sig),pch=21)
p = p + facet_grid(Pathway~.,scales = "free_y",space = "free_y", drop=T)#, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
plots[[1]] = p
gp = do.call(rbind_gtable, plots)
grid.newpage()
grid.draw(gp)
p = ggplot(data=pho_path)
p = p + geom_point(aes(x=sample, y=Global_phosphorylation, fill=Sig),pch=21)
p = p + facet_grid(Pathway~.,scales = "free_y",space = "free_y")#, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
plots[[1]] = p
gp = do.call(rbind_gtable, plots)
grid.newpage()
grid.draw(gp)
library(cowplot)
install.packages("cowplot", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(cowplot)
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
p = ggplot(data=pho_table_m)
p = p + geom_tile(aes(x=sample, y=Phosphosite, fill=value, color=self_kinorsub, width=0.7, height=0.7), size = 0.5)
p = p + scale_color_manual(values=c("FALSE_FALSE" = NA,"FALSE_TRUE" = NA ,"TRUE_FALSE" = "#737373", "TRUE_TRUE" = "black"))
p = p + scale_fill_gradientn(name= "phosphorylation level", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + facet_grid(protein~.,scales = "free_y", space = "free_y", drop=T)#, , space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
p
plots[[2]] = p
grid.newpage()
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
grid.newpage()
#cal_width = 20
fn = paste(baseD,'pan3can_shared_data/analysis_results/pathway/tailored_outlier/',path,"_correlated_phosphosites_outlier_marked_top_",len,"_",cancer,"_kinase_table.pdf",sep ="")
pdf(fn, height=6, width=15,useDingbats = F)
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
dev.off()
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
ggsave(file=fn, height=6, width=15)
View(pho_table_m)
p = ggplot(data=pho_table_m)
p = p + geom_tile(aes(x=sample, y=Phosphosite, fill=value, color=self_kinorsub, width=0.7, height=0.7), size = 0.5)
p = p + scale_color_manual(values=c("FALSE_FALSE" = NA,"FALSE_TRUE" = NA ,"TRUE_FALSE" = "#737373", "TRUE_TRUE" = "black"))
p = p + scale_fill_gradientn(name= "phosphorylation level", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + facet_grid(cor_type~.,scales = "free_y", space = "free_y", drop=T)#, , space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
p
for (path in "Cell cycle") {
pho_path <- BRCA_Pho_pathway_all_merge[BRCA_Pho_pathway_all_merge$Pathway==path,]
pho_path$sample <- reorder(pho_path$Sample, pho_path$Global_phosphorylation)
p = ggplot(data=pho_path)
p = p + geom_point(aes(x=sample, y=Global_phosphorylation, fill=Sig),pch=21)
p = p + facet_grid(Pathway~.,scales = "free_y",space = "free_y")#, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
plots[[1]] = p
cor_table <- pathway_site_pho_cor_ordr[pathway_site_pho_cor_ordr$pathway==path,]
proteins <- as.vector(cor_table$protein)
rsds <- as.vector(cor_table$rsd)
rows <- c()
len <- min(nrow(cor_table),top)
for (i in 1:len) {
temp <- which(pho_rsd_split$SUBSTRATE == proteins[i] & pho_rsd_split$SUB_MOD_RSD == rsds[i])
rows <- c(rows,temp)
}
phosite_score <- pho_data[rows,-1]
for (i in 1:nrow(phosite_score)) {
temp <- phosite_score[i,]
IQR = quantile(temp, probs=0.75, na.rm=T) - quantile(temp, probs=0.25, na.rm=T)
phosite_score[i,] = ( temp - quantile(temp, probs=center, na.rm=T))/IQR
}
pho_table <- cbind(pho_rsd_split[rows,c("SUBSTRATE","SUB_MOD_RSD")],phosite_score)
pho_table_m <- melt(pho_table,id = c("SUBSTRATE","SUB_MOD_RSD"))
colnames(pho_table_m)[1:3] <- c("protein","rsd","Sample")
pho_table_m <- merge(pho_table_m,pho_path[,c("Global_phosphorylation","Sample")],all.x = T)
pho_table_m <- merge(pho_table_m,cor_table[,c("protein","rsd","cor_type","pvalue")], all.x = T)
pho_table_m$sample <- reorder(pho_table_m$Sample,pho_table_m$Global_phosphorylation)
pho_table_m$phosphosite <- paste(pho_table_m$protein,pho_table_m$rsd,sep = ":")
pho_table_m$Phosphosite <- reorder(pho_table_m$phosphosite,-pho_table_m$pvalue)
pho_table_m <- merge(pho_table_m,outlier_overlap, all.x = T)
pho_table_m$is.kin.outlier <- (!is.na(pho_table_m$up_phos_cscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$up_phos_cscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$up_phos_cscore < - out_thres))
pho_table_m$is.sub.outlier <- (!is.na(pho_table_m$sub_phos_ctransscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$sub_phos_ctransscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$sub_phos_ctransscore < - out_thres))
pho_table_m$kinorsub <- pho_table_m$is.kin.outlier | pho_table_m$is.sub.outlier
pho_table_m$is.self.outlier <- (!is.na(pho_table_m$value)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$value > 1) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$value < - 1))
pho_table_m$self_kinorsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinorsub,sep = "_")
pho_table_m$kinandsub <- pho_table_m$is.kin.outlier & pho_table_m$is.sub.outlier
pho_table_m$self_kinandsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinandsub,sep = "_")
lim = max(abs(max(pho_table_m$value, na.rm = T)),abs(min(pho_table_m$value, na.rm = T)))
p = ggplot(data=pho_table_m)
p = p + geom_tile(aes(x=sample, y=Phosphosite, fill=value, color=self_kinorsub, width=0.7, height=0.7), size = 0.5)
p = p + scale_color_manual(values=c("FALSE_FALSE" = NA,"FALSE_TRUE" = NA ,"TRUE_FALSE" = "#737373", "TRUE_TRUE" = "black"))
p = p + scale_fill_gradientn(name= "phosphorylation level", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + facet_grid(cor_type~.,scales = "free_y", space = "free_y", drop=T)#, , space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
p
plots[[2]] = p
# gp = do.call(rbind_gtable, plots)
# print the integrated plot
# grid.newpage()
#cal_width = 20
fn = paste(baseD,'pan3can_shared_data/analysis_results/pathway/tailored_outlier/',path,"_correlated_phosphosites_outlier_marked_top_",len,"_",cancer,"_kinase_table.pdf",sep ="")
# pdf(fn, height=6, width=15,useDingbats = F)
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
ggsave(file=fn, height=6, width=15)
# dev.off()
}
for (path in unique(BRCA_Pho_pathway_all_merge$Pathway)) {
#for (path in "Cell cycle") {
pho_path <- BRCA_Pho_pathway_all_merge[BRCA_Pho_pathway_all_merge$Pathway==path,]
pho_path$sample <- reorder(pho_path$Sample, pho_path$Global_phosphorylation)
p = ggplot(data=pho_path)
p = p + geom_point(aes(x=sample, y=Global_phosphorylation, fill=Sig),pch=21)
p = p + facet_grid(Pathway~.,scales = "free_y",space = "free_y")#, drop=T, space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
plots[[1]] = p
cor_table <- pathway_site_pho_cor_ordr[pathway_site_pho_cor_ordr$pathway==path,]
proteins <- as.vector(cor_table$protein)
rsds <- as.vector(cor_table$rsd)
rows <- c()
len <- min(nrow(cor_table),top)
for (i in 1:len) {
temp <- which(pho_rsd_split$SUBSTRATE == proteins[i] & pho_rsd_split$SUB_MOD_RSD == rsds[i])
rows <- c(rows,temp)
}
phosite_score <- pho_data[rows,-1]
for (i in 1:nrow(phosite_score)) {
temp <- phosite_score[i,]
IQR = quantile(temp, probs=0.75, na.rm=T) - quantile(temp, probs=0.25, na.rm=T)
phosite_score[i,] = ( temp - quantile(temp, probs=center, na.rm=T))/IQR
}
pho_table <- cbind(pho_rsd_split[rows,c("SUBSTRATE","SUB_MOD_RSD")],phosite_score)
pho_table_m <- melt(pho_table,id = c("SUBSTRATE","SUB_MOD_RSD"))
colnames(pho_table_m)[1:3] <- c("protein","rsd","Sample")
pho_table_m <- merge(pho_table_m,pho_path[,c("Global_phosphorylation","Sample")],all.x = T)
pho_table_m <- merge(pho_table_m,cor_table[,c("protein","rsd","cor_type","pvalue")], all.x = T)
pho_table_m$sample <- reorder(pho_table_m$Sample,pho_table_m$Global_phosphorylation)
pho_table_m$phosphosite <- paste(pho_table_m$protein,pho_table_m$rsd,sep = ":")
pho_table_m$Phosphosite <- reorder(pho_table_m$phosphosite,-pho_table_m$pvalue)
pho_table_m <- merge(pho_table_m,outlier_overlap, all.x = T)
pho_table_m$is.kin.outlier <- (!is.na(pho_table_m$up_phos_cscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$up_phos_cscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$up_phos_cscore < - out_thres))
pho_table_m$is.sub.outlier <- (!is.na(pho_table_m$sub_phos_ctransscore)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$sub_phos_ctransscore > out_thres) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$sub_phos_ctransscore < - out_thres))
pho_table_m$kinorsub <- pho_table_m$is.kin.outlier | pho_table_m$is.sub.outlier
pho_table_m$is.self.outlier <- (!is.na(pho_table_m$value)) & ((pho_table_m$cor_type=="positively-correlated" & pho_table_m$value > 1) | (pho_table_m$cor_type=="negatively-correlated" & pho_table_m$value < - 1))
pho_table_m$self_kinorsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinorsub,sep = "_")
pho_table_m$kinandsub <- pho_table_m$is.kin.outlier & pho_table_m$is.sub.outlier
pho_table_m$self_kinandsub <- paste(pho_table_m$is.self.outlier, pho_table_m$kinandsub,sep = "_")
lim = max(abs(max(pho_table_m$value, na.rm = T)),abs(min(pho_table_m$value, na.rm = T)))
p = ggplot(data=pho_table_m)
p = p + geom_tile(aes(x=sample, y=Phosphosite, fill=value, color=self_kinorsub, width=0.7, height=0.7), size = 0.5)
p = p + scale_color_manual(values=c("FALSE_FALSE" = NA,"FALSE_TRUE" = NA ,"TRUE_FALSE" = "#737373", "TRUE_TRUE" = "black"))
p = p + scale_fill_gradientn(name= "phosphorylation level", na.value=NA, colours=RdBu1024, limit=c(-lim,lim))
p = p + facet_grid(cor_type~.,scales = "free_y", space = "free_y", drop=T)#, , space = "free_y",scales = "free_y")#, space = "free", scales = "free")
p = p + theme_bw() + theme_nogrid()
p = p + theme(text = element_text(size = 10),
axis.title.x = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
strip.text = element_text(size = 8),
panel.background = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
legend.position="right")
p
plots[[2]] = p
# gp = do.call(rbind_gtable, plots)
# print the integrated plot
# grid.newpage()
#cal_width = 20
fn = paste(baseD,'pan3can_shared_data/analysis_results/pathway/tailored_outlier/',path,"_correlated_phosphosites_outlier_marked_top_",len,"_",cancer,"_kinase_table.pdf",sep ="")
# pdf(fn, height=6, width=15,useDingbats = F)
plot_grid(plots[[1]], plots[[2]], align = "v", nrow = 2, rel_heights = c(1/2,1/2))
ggsave(file=fn, height=6, width=15)
# dev.off()
}
View(ks_phos_corr)
ks_phos_corr[ks_phos_corr$gene=="ERBB2",]
test_her2 <- table_2can[table_2can$KINASE=="ERBB2",]
View(test_her2)
View(pathway_gene_pho_cor)
pathway_pho_reg[pathway_pho_reg$protein=="ERBB2",]
View(pathway_site_pho_cor)
pathway_site_pho_cor_ordr[pathway_site_pho_cor_ordr$protein=="ERBB2",]
View(pathway_gene_pho_cor)
View(pathway_gene_pho_cor)
pathway_gene_pho_cor[pathway_gene_pho_cor$gene=="ERBB2",]
View(pathway_pho_reg)
View(overlap)
pathway <- c()
protein <- c()
P_phos_level <- c(); P_kin_level <- c(); P_sub_level <- c()
coef_phos_level <- c(); coef_kin_level <- c(); coef_sub_level <- c()
fdr_phos_level <- c(); fdr_kin_level <- c(); fdr_sub_level <- c()
count <- 0
for (path in unique(BRCA_Pho_pathway_all_merge$Pathway)) {
#for (path in "MAPK signaling pathway") {
pho_path <- BRCA_Pho_pathway_all_merge[BRCA_Pho_pathway_all_merge$Pathway==path,]
genes <- KEGG[[which(grepl(path,kegg))]]
rows <- c()
for (gene in genes) {
temp <- which(overlap$kinase == gene)
rows <- c(rows,temp)
}
pho_split <- overlap[rows,]
colnames(pho_path)[2] <- "sample"
pho_split <- merge(pho_split, pho_path[,c("sample","Global_phosphorylation", "Sig")], all.x = T)
for (gene in unique(pho_split$kinase)) {
pho_gene <- pho_split[pho_split$kinase==gene,]
if (!all(is.na(pho_gene$up_phos_c)) & !all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$up_phos_c))){
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
} else if (!all(is.na(pho_gene$kin_phos_c))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c, data = pho_gene)
}
count <- count + 1
pathway[count] <- path
protein[count] <- gene
pvalues <- coef(summary(fit))
if ( length(which(rownames(pvalues)=="kin_phos_c")) > 0 ) {
P_phos_level[count] <- pvalues["kin_phos_c",4]
} else {
P_phos_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="up_phos_c")) > 0 ) {
P_kin_level[count] <- pvalues["up_phos_c",4]
} else {
P_kin_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="sub_phos_ctrans")) > 0 ) {
P_sub_level[count] <- pvalues["sub_phos_ctrans",4]
} else {
P_sub_level[count] <- NA
}
coef_phos_level[count] <- fit$coefficients["kin_phos_c"];
coef_kin_level[count] <- fit$coefficients["up_phos_c"];
coef_sub_level[count] <- fit$coefficients["up_phos_c"]
}
fdr_phos_level <- c(fdr_phos_level,p.adjust(P_phos_level[pathway==path], method = "fdr"))
fdr_kin_level <- c(fdr_kin_level,p.adjust(P_kin_level[pathway==path], method = "fdr"))
fdr_sub_level <- c(fdr_sub_level,p.adjust(P_sub_level[pathway==path], method = "fdr"))
}
pathway_pho_level_reg <- data.frame(pathway,protein,
fdr_phos_level,fdr_kin_level,fdr_sub_level,
coef_phos_level,coef_kin_level,coef_sub_level,
P_phos_level,P_kin_level,P_sub_level)
tn = paste(baseD,"pan3can_shared_data/analysis_results/tables/pathway_phos_level_regression_adjust_pvalue_within_pathways_BRCA.txt", sep="")
write.table(pathway_pho_level_reg, file=tn, quote=F, sep = '\t', row.names = FALSE)
View(pathway_pho_level_reg)
pathway_pho_level_reg[pathway_pho_level_reg$protein=="ERBB2",]
head(P_kin_level)
View(BRCA_Pho_pathway_all_merge)
pathway <- c()
protein <- c()
P_phos_level <- c(); P_kin_level <- c(); P_sub_level <- c()
coef_phos_level <- c(); coef_kin_level <- c(); coef_sub_level <- c()
fdr_phos_level <- c(); fdr_kin_level <- c(); fdr_sub_level <- c()
count <- 0
#for (path in unique(BRCA_Pho_pathway_all_merge$Pathway)) {
for (path in "ErbB signaling pathway") {
pho_path <- BRCA_Pho_pathway_all_merge[BRCA_Pho_pathway_all_merge$Pathway==path,]
genes <- KEGG[[which(grepl(path,kegg))]]
rows <- c()
for (gene in genes) {
temp <- which(overlap$kinase == gene)
rows <- c(rows,temp)
}
pho_split <- overlap[rows,]
colnames(pho_path)[2] <- "sample"
pho_split <- merge(pho_split, pho_path[,c("sample","Global_phosphorylation", "Sig")], all.x = T)
for (gene in unique(pho_split$kinase)) {
pho_gene <- pho_split[pho_split$kinase==gene,]
if (!all(is.na(pho_gene$up_phos_c)) & !all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$up_phos_c))){
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
} else if (!all(is.na(pho_gene$kin_phos_c))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c, data = pho_gene)
}
count <- count + 1
pathway[count] <- path
protein[count] <- gene
pvalues <- coef(summary(fit))
if ( length(which(rownames(pvalues)=="kin_phos_c")) > 0 ) {
P_phos_level[count] <- pvalues["kin_phos_c",4]
} else {
P_phos_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="up_phos_c")) > 0 ) {
P_kin_level[count] <- pvalues["up_phos_c",4]
} else {
P_kin_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="sub_phos_ctrans")) > 0 ) {
P_sub_level[count] <- pvalues["sub_phos_ctrans",4]
} else {
P_sub_level[count] <- NA
}
coef_phos_level[count] <- fit$coefficients["kin_phos_c"];
coef_kin_level[count] <- fit$coefficients["up_phos_c"];
coef_sub_level[count] <- fit$coefficients["up_phos_c"]
}
fdr_phos_level <- c(fdr_phos_level,p.adjust(P_phos_level[pathway==path], method = "fdr"))
fdr_kin_level <- c(fdr_kin_level,p.adjust(P_kin_level[pathway==path], method = "fdr"))
fdr_sub_level <- c(fdr_sub_level,p.adjust(P_sub_level[pathway==path], method = "fdr"))
}
head(P_phos_level)
pathway_pho_level_reg <- data.frame(pathway,protein,
fdr_phos_level,fdr_kin_level,fdr_sub_level,
coef_phos_level,coef_kin_level,coef_sub_level,
P_phos_level,P_kin_level,P_sub_level)
View(pathway_pho_level_reg)
unique(pho_split$kinase)
gene <- "ERBB2"
pho_gene <- pho_split[pho_split$kinase==gene,]
View(pho_gene)
if (!all(is.na(pho_gene$up_phos_c)) & !all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$up_phos_c))){
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
} else if (!all(is.na(pho_gene$kin_phos_c))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c, data = pho_gene)
}
fit
coef(summary(fit))
gene
View(pho_gene)
pho_gene <- data.frame(pho_split[pho_split$kinase==gene,])
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
git
fit
coef(summary(fit))
library(readr)
overlap <- read_delim("~/Box Sync/pan3can_shared_data/analysis_results/tables/BRCA_ks_score_validated_ks_only_median_scored_kinase_table.txt",
"\t", escape_double = FALSE, col_types = cols(n_sub_pho = col_double(),
n_up_pho = col_double(), sub_phos_ctrans = col_double(),
sub_phos_ctransscore = col_double(),
up_phos_c = col_double(), up_phos_cscore = col_double()),
trim_ws = TRUE)
View(overlap)
pathway <- c()
protein <- c()
P_phos_level <- c(); P_kin_level <- c(); P_sub_level <- c()
coef_phos_level <- c(); coef_kin_level <- c(); coef_sub_level <- c()
fdr_phos_level <- c(); fdr_kin_level <- c(); fdr_sub_level <- c()
count <- 0
#for (path in unique(BRCA_Pho_pathway_all_merge$Pathway)) {
for (path in "ErbB signaling pathway") {
pho_path <- BRCA_Pho_pathway_all_merge[BRCA_Pho_pathway_all_merge$Pathway==path,]
genes <- KEGG[[which(grepl(path,kegg))]]
rows <- c()
for (gene in genes) {
temp <- which(overlap$kinase == gene)
rows <- c(rows,temp)
}
pho_split <- overlap[rows,]
colnames(pho_path)[2] <- "sample"
pho_split <- merge(pho_split, pho_path[,c("sample","Global_phosphorylation", "Sig")], all.x = T)
for (gene in unique(pho_split$kinase)) {
pho_gene <- data.frame(pho_split[pho_split$kinase==gene,])
if (!all(is.na(pho_gene$up_phos_c)) & !all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$sub_phos_ctrans))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c + sub_phos_ctrans, data = pho_gene)
} else if (!all(is.na(pho_gene$up_phos_c))){
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
} else if (!all(is.na(pho_gene$kin_phos_c))) {
fit <- glm(Global_phosphorylation ~ kin_phos_c, data = pho_gene)
}
count <- count + 1
pathway[count] <- path
protein[count] <- gene
pvalues <- coef(summary(fit))
if ( length(which(rownames(pvalues)=="kin_phos_c")) > 0 ) {
P_phos_level[count] <- pvalues["kin_phos_c",4]
} else {
P_phos_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="up_phos_c")) > 0 ) {
P_kin_level[count] <- pvalues["up_phos_c",4]
} else {
P_kin_level[count] <- NA
}
if ( length(which(rownames(pvalues)=="sub_phos_ctrans")) > 0 ) {
P_sub_level[count] <- pvalues["sub_phos_ctrans",4]
} else {
P_sub_level[count] <- NA
}
coef_phos_level[count] <- fit$coefficients["kin_phos_c"];
coef_kin_level[count] <- fit$coefficients["up_phos_c"];
coef_sub_level[count] <- fit$coefficients["up_phos_c"]
}
fdr_phos_level <- c(fdr_phos_level,p.adjust(P_phos_level[pathway==path], method = "fdr"))
fdr_kin_level <- c(fdr_kin_level,p.adjust(P_kin_level[pathway==path], method = "fdr"))
fdr_sub_level <- c(fdr_sub_level,p.adjust(P_sub_level[pathway==path], method = "fdr"))
}
pathway_pho_level_reg <- data.frame(pathway,protein,
fdr_phos_level,fdr_kin_level,fdr_sub_level,
coef_phos_level,coef_kin_level,coef_sub_level,
P_phos_level,P_kin_level,P_sub_level)
View(pathway_pho_level_reg)
BRCA_Pho_pathway_all_merge <- read_delim(paste(baseD,"pan3can_shared_data/analysis_results/pathway_activation/2017-02-23_KH_",cancer,"_cross_pathway_activation.tsv",sep = "") ,
"\t", escape_double = FALSE, trim_ws = TRUE)
path
View(pho_split)
gene <- "ERBB2"
pho_gene <- data.frame(pho_split[pho_split$kinase==gene,])
View(pho_gene)
fit <- glm(Global_phosphorylation ~ kin_phos_c + up_phos_c, data = pho_gene)
fit
coef(summary(fit))
